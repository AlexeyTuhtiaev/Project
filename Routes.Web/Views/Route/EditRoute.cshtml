@model Routes.Dal.Entities.Route

@{
    ViewBag.Title = "Редактировать маршрут";
}
<div class="container">
    @Html.Action("RouteMenu", "Menu", new { c = Request.RequestContext.RouteData.Values["controller"] })
</div>

@using (Html.BeginForm("EditRoute", "Route",new { routeId = Model.RouteId} ,FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="container">
        <div class="row">
            <div class="col-md-8">
                <div id="map-task"></div>
            </div>
            <div class="col-md-4">
                <div class="row">


                    <div class="form-group">
                        <h5>Введите описание маршрута:</h5>

                        @Html.TextAreaFor(model => model.Description, 5, 50, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                    </div>

                </div>
                <div class="row">
                    <h5>Выберите способ вашего путешествия:</h5>

                    <div id="mode-selector" class="controls form-group">
                        @Html.RadioButtonFor(model => model.TravelType, "WALKING", new { @checked = "checked" })
                        @Html.LabelFor(model => model.TravelType, "WALKING", htmlAttributes: new { @class = "" })
                        @Html.ValidationMessageFor(model => model.TravelType, "", new { @class = "text-danger" })

                        @Html.RadioButtonFor(model => model.TravelType, "DRIVING", null)
                        @Html.LabelFor(model => model.TravelType, "DRIVING", htmlAttributes: new { @class = "" })
                        @Html.ValidationMessageFor(model => model.TravelType, "", new { @class = "text-danger" })

                        @Html.RadioButtonFor(model => model.TravelType, "TRANSIT", null)
                        @Html.LabelFor(model => model.TravelType, "TRANSIT", htmlAttributes: new { @class = "" })
                        @Html.ValidationMessageFor(model => model.TravelType, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <h5>Введите начало своего маршрута:</h5>
                    @Html.EditorFor(model => model.OriginPoint, new { htmlAttributes = new { @class = "controls form-group", placeholder = "Введите начало" } })
                </div>
                <div class="row">
                    <h5>Вы можете добавить промежуточные точки путешествия</h5>
                    <div id="way">
                        <div id="wayPointsScope"></div>
                        <input type="button" id="btnAddWaypoints" class="btn btn-default btn-sm" value="Добавить промежуточную точку">
                    </div>
                </div>
                <div class="row">
                    <h5>Введите окончание своего маршрута:</h5>
                    @Html.EditorFor(model => model.DestinationPoint, new { htmlAttributes = new { @class = "controls", placeholder = "Введите окончание", id = "destination-input" } })
                </div>
                <div class="row">
                    <button type="button" class="btn btn-success" id="btnShowRoute">Посмотреть маршрут</button>

                    <input type="submit" id="submit" value="Сохранить" class="btn btn-success btn-lg">
                </div>
                <div class="row">
                    <div id="directions-panel">Путь вашего маршрута согласно введенных данных</div>
                </div>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Вернуться назад", "Index", "Home")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="@RouteJs.RouteJsHandler.HandlerUrl"></script>
<script src="~/Scripts/Routes/EditRoute.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAX4qRmbIMnu-nD99XFxkfO1pw6TEi0OTc&libraries=places&callback=init"
        async defer></script>